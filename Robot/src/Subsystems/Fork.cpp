// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Fork.h"
#include "../RobotMap.h"
#include "../Commands/MoveForkCommand.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
Fork::Fork() : PIDSubsystem("Fork", 1.0, 0.0, 0.0) {
	SetAbsoluteTolerance(0.2);
	GetPIDController()->SetContinuous(false);
	LiveWindow::GetInstance()->AddActuator("Fork", "PIDSubsystem Controller", GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	forkMotor = RobotMap::forkForkMotor;
	forkEncoder = RobotMap::forkForkEncoder;
	limitSwitchOpen = RobotMap::forkLimitSwitchOpen;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Use these to get going:
	// SetSetpoint() -  Sets where the PID controller should move the system
	//                  to
	// Enable() - Enables the PID controller.
}

double Fork::ReturnPIDInput() {
	// Return your input value for the PID loop
	// e.g. a sensor, like a potentiometer:
	// yourPot->SetAverageVoltage() / kYourMaxVoltage;	
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return forkEncoder->PIDGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void Fork::UsePIDOutput(double output) {
	// Use output to drive your system, like a motor
	// e.g. yourMotor->Set(output);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	forkMotor->PIDWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void Fork::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//setDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new MoveForkCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
/*void Fork::MoveForkMotor(float input){
	if(limitSwitchOpen == true)
	{
		forkMotor->Set(input);
	}
	forkMotor->Set(input);
}
*/
bool Fork::OnTarget(double distance){
	if(forkEncoder->GetDistance() >= distance)
	{
		return true;
	}
	return false;
}
void Fork::ResetEncoder()
{
	forkEncoder->Reset();
}

void Fork::MoveForkMotor(Joystick* joystick)
{
	if(joystick->GetRawAxis(0) <= 0)
	{
		if(RobotMap::forkLimitSwitchOpen->Get() == false)
		{
		forkMotor->Set(0);
		}
		else
		{
		forkMotor->Set(joystick->GetRawAxis(0) * -1);
		}
	}
	else
	{
	forkMotor->Set(joystick->GetRawAxis(0) * -1);
	}
}

