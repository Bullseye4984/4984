// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include <math.h>
#include "DriveTrain.h"
#include "../RobotMap.h"
#include "Joystick.h"

const float kP = 1.0;
const float kI = 0.0;
const float kD = 0.0;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/TankDriveCommand.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftMotor = RobotMap::driveTrainLeftMotor;
	rightMotor = RobotMap::driveTrainRightMotor;
	robotDrive = RobotMap::driveTrainRobotDrive;
	leftMotorEncoder = RobotMap::driveTrainLeftMotorEncoder;
	rightMotorEncoder = RobotMap::driveTrainRightMotorEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftMotorPIDController = new PIDController(kP, kI, kD, leftMotorEncoder, leftMotor);
	rightMotorPIDController = new PIDController(kP, kI, kD, rightMotorEncoder, rightMotor);
}

void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new TankDriveCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	leftMotorPIDController->SetPercentTolerance(3);
	rightMotorPIDController->SetPercentTolerance(3);
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::TankDrive(Joystick* joystick){
	TankDrive(joystick->GetRawAxis(1) * 0.25, joystick->GetRawAxis(5) * 0.25);
}

void DriveTrain::TankDrive(float left, float right){
	robotDrive->TankDrive(left, right);
}

void DriveTrain::Disable(){
	leftMotorPIDController->Disable();
	rightMotorPIDController->Disable();
}

void DriveTrain::Enable(){
	ResetEncoders();
	leftMotorPIDController->Enable();
	rightMotorPIDController->Enable();
}


bool DriveTrain::OnTarget(){
	if(leftMotorEncoder->GetDistance() >= Distance || rightMotorEncoder->GetDistance() >= Distance){
		return true;
	}
	else{
		return false;
	}
}

void DriveTrain::DriveToDistance()
{
	if(OnTarget() == true)
	{
		leftMotor->Disable();
		rightMotor->Disable();

	}

	else{
		leftMotor->Set(1);
		rightMotor->Set(1);
	}
}

void DriveTrain::SetSetpoint(double setpoint){
	leftMotorPIDController->SetSetpoint(setpoint);
	rightMotorPIDController->SetSetpoint(setpoint * -1);
	Distance = setpoint;
}
void DriveTrain::ResetEncoders()
{
	leftMotorEncoder->Reset();
	rightMotorEncoder->Reset();
}
