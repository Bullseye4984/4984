// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveTrainLeftMotor = NULL;
SpeedController* RobotMap::driveTrainRightMotor = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive = NULL;
Encoder* RobotMap::driveTrainLeftMotorEncoder = NULL;
Encoder* RobotMap::driveTrainRightMotorEncoder = NULL;
SpeedController* RobotMap::spoolSpoolMotor = NULL;
AnalogPotentiometer* RobotMap::spoolAnalogPotentiometer1 = NULL;
DigitalInput* RobotMap::spoolLimitSwitchUp = NULL;
DigitalInput* RobotMap::spoolLimitSwitchDown = NULL;
SpeedController* RobotMap::forkForkMotor = NULL;
Encoder* RobotMap::forkForkEncoder = NULL;
DigitalInput* RobotMap::forkLimitSwitchOpen = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	driveTrainLeftMotor = new Victor(0);
	lw->AddActuator("Drive Train", "Left Motor", (Victor*) driveTrainLeftMotor);
	
	driveTrainRightMotor = new Victor(1);
	lw->AddActuator("Drive Train", "Right Motor", (Victor*) driveTrainRightMotor);
	
	driveTrainRobotDrive = new RobotDrive(driveTrainLeftMotor, driveTrainRightMotor);
	
	driveTrainRobotDrive->SetSafetyEnabled(true);
        driveTrainRobotDrive->SetExpiration(0.1);
        driveTrainRobotDrive->SetSensitivity(0.5);
        driveTrainRobotDrive->SetMaxOutput(1.0);
        driveTrainRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        driveTrainRobotDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);        

	driveTrainLeftMotorEncoder = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Drive Train", "Left Motor Encoder", driveTrainLeftMotorEncoder);
	driveTrainLeftMotorEncoder->SetDistancePerPulse(0.034888888888888886);
        driveTrainLeftMotorEncoder->SetPIDSourceParameter(Encoder::kDistance);
	driveTrainRightMotorEncoder = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Drive Train", "Right Motor Encoder", driveTrainRightMotorEncoder);
	driveTrainRightMotorEncoder->SetDistancePerPulse(0.034888888888888886);
        driveTrainRightMotorEncoder->SetPIDSourceParameter(Encoder::kDistance);
	spoolSpoolMotor = new Victor(2);
	lw->AddActuator("Spool", "Spool Motor", (Victor*) spoolSpoolMotor);
	
	spoolAnalogPotentiometer1 = new AnalogPotentiometer(0, 1.0, 0.0);
	lw->AddSensor("Spool", "Analog Potentiometer 1", spoolAnalogPotentiometer1);
	
	spoolLimitSwitchUp = new DigitalInput(4);
	lw->AddSensor("Spool", "Limit Switch Up", spoolLimitSwitchUp);
	
	spoolLimitSwitchDown = new DigitalInput(5);
	lw->AddSensor("Spool", "Limit Switch Down", spoolLimitSwitchDown);
	
	forkForkMotor = new VictorSP(3);
	lw->AddActuator("Fork", "Fork Motor", (VictorSP*) forkForkMotor);
	
	forkForkEncoder = new Encoder(6, 7, false, Encoder::k4X);
	lw->AddSensor("Fork", "Fork Encoder", forkForkEncoder);
	forkForkEncoder->SetDistancePerPulse(4.0E-4);
        forkForkEncoder->SetPIDSourceParameter(Encoder::kDistance);
	forkLimitSwitchOpen = new DigitalInput(8);
	lw->AddSensor("Fork", "Limit Switch Open", forkLimitSwitchOpen);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
