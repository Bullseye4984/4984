// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveTrainLeftMotor = NULL;
SpeedController* RobotMap::driveTrainRightMotor = NULL;
RobotDrive* RobotMap::driveTrainRobotDrive = NULL;
SpeedController* RobotMap::spoolSpoolMotor = NULL;
AnalogPotentiometer* RobotMap::spoolAnalogPotentiometer1 = NULL;
AnalogPotentiometer* RobotMap::forkAnalogPotentiometer1 = NULL;
SpeedController* RobotMap::forkForkMotor = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	driveTrainLeftMotor = new Victor(0);
	lw->AddActuator("Drive Train", "Left Motor", (Victor*) driveTrainLeftMotor);
	
	driveTrainRightMotor = new Victor(1);
	lw->AddActuator("Drive Train", "Right Motor", (Victor*) driveTrainRightMotor);
	
	driveTrainRobotDrive = new RobotDrive(driveTrainLeftMotor, driveTrainRightMotor);
	
	driveTrainRobotDrive->SetSafetyEnabled(true);
        driveTrainRobotDrive->SetExpiration(0.1);
        driveTrainRobotDrive->SetSensitivity(0.5);
        driveTrainRobotDrive->SetMaxOutput(1.0);
        driveTrainRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        driveTrainRobotDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);        

	spoolSpoolMotor = new Victor(2);
	lw->AddActuator("Spool", "Spool Motor", (Victor*) spoolSpoolMotor);
	
	spoolAnalogPotentiometer1 = new AnalogPotentiometer(0, 1.0, 0.0);
	lw->AddSensor("Spool", "Analog Potentiometer 1", spoolAnalogPotentiometer1);
	
	forkAnalogPotentiometer1 = new AnalogPotentiometer(1, 1.0, 0.0);
	lw->AddSensor("Fork", "Analog Potentiometer 1", forkAnalogPotentiometer1);
	
	forkForkMotor = new VictorSP(3);
	lw->AddActuator("Fork", "Fork Motor", (VictorSP*) forkForkMotor);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
