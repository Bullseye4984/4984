// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/BasicAutonomous.h"
#include "Commands/CloseForkCommand.h"
#include "Commands/DriveToAutoZoneCommand.h"
#include "Commands/DrivetoAutoZone2Command.h"
#include "Commands/GrabBinSetpoint.h"
#include "Commands/MoveForkCommand.h"
#include "Commands/MoveForkIn.h"
#include "Commands/MoveForkOut.h"
#include "Commands/MoveSpoolCommand.h"
#include "Commands/OpenForkCommand.h"
#include "Commands/TankDriveCommand.h"
#include "Commands/Turn90DegreesCCW.h"
#include "Commands/Turn90DegreesCW.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	driver = new Joystick(0);
	
	robotOperator = new Joystick(1);
	
	moveForkOutButton = new JoystickButton(robotOperator, 6);
	moveForkOutButton->WhileHeld(new MoveForkOut());
	moveForkInButton = new JoystickButton(robotOperator, 5);
	moveForkInButton->WhileHeld(new MoveForkIn());
     

        // SmartDashboard Buttons
	SmartDashboard::PutData("Drive To Auto Zone Command", new DriveToAutoZoneCommand());

	SmartDashboard::PutData("Tank Drive Command", new TankDriveCommand());

	SmartDashboard::PutData("Move Spool Command", new MoveSpoolCommand());

	SmartDashboard::PutData("Move Fork Command", new MoveForkCommand());

	SmartDashboard::PutData("Drive to Auto Zone 2 Command", new DrivetoAutoZone2Command());

	SmartDashboard::PutData("Basic Autonomous", new BasicAutonomous());

	SmartDashboard::PutData("Close Fork Command", new CloseForkCommand());

	SmartDashboard::PutData("Open Fork Command", new OpenForkCommand());

	SmartDashboard::PutData("Move Fork Out", new MoveForkOut());

	SmartDashboard::PutData("Move Fork In", new MoveForkIn());

	SmartDashboard::PutData("Grab Bin Setpoint", new GrabBinSetpoint());

	SmartDashboard::PutData("Turn 90 Degrees CW", new Turn90DegreesCW());

	SmartDashboard::PutData("Turn 90 Degrees CCW", new Turn90DegreesCCW());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

Joystick* OI::getDriver() {
	return driver;
}

Joystick* OI::getRobotOperator() {
	return robotOperator;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
